name: HubSpot Chatbot Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - performance
        - load

env:
  NODE_VERSION: '18'
  CHATBOT_API_URL: ${{ secrets.CHATBOT_API_URL }}

jobs:
  basic-tests:
    name: Basic Functionality Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'basic' || github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps

    - name: Run basic functionality tests
      run: |
        npm run test:basic
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: basic-test-results
        path: |
          test-results/
          reports/generated/
        retention-days: 7

    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-basic
        path: playwright-report/
        retention-days: 7

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == '' }}
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps ${{ matrix.browser }}

    - name: Run cross-platform tests
      run: |
        npx playwright test tests/playwright/cross-platform.test.js --project=${{ matrix.browser }}
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-platform-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'performance' || github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps

    - name: Run performance tests
      run: |
        npm run test:performance
      env:
        CI: true

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          test-results/
          reports/generated/
        retention-days: 7

  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'load' || github.event.inputs.test_scope == 'full' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        mkdir -p reports/generated
        k6 run --out json=reports/generated/k6-results-ci.json tests/k6/load-testing.js
      env:
        CHATBOT_API_URL: ${{ env.CHATBOT_API_URL }}

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: |
          reports/generated/k6-results-ci.json
        retention-days: 7

  mobile-tests:
    name: Mobile Device Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == '' }}
    
    strategy:
      matrix:
        device: [iPhone, iPad, Pixel]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps

    - name: Run mobile tests
      run: |
        npx playwright test tests/playwright/cross-platform.test.js --project=mobile
      env:
        CI: true
        DEVICE: ${{ matrix.device }}

    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results-${{ matrix.device }}
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  generate-report:
    name: Generate Consolidated Report
    runs-on: ubuntu-latest
    needs: [basic-tests, cross-platform-tests, performance-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Generate consolidated report
      run: |
        node scripts/generate-consolidated-report.js
      env:
        ARTIFACTS_PATH: artifacts/

    - name: Upload consolidated report
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-test-report
        path: |
          reports/generated/consolidated-report.json
          reports/generated/executive-summary.md
        retention-days: 30

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportPath = 'reports/generated/executive-summary.md';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ¤– Chatbot Testing Results\n\n${report}`
              });
            }
          } catch (error) {
            console.log('Could not post comment:', error.message);
          }

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [basic-tests, cross-platform-tests, performance-tests]
    if: failure()
    
    steps:
    - name: Send notification
      if: github.event_name == 'schedule' || github.event_name == 'push'
      run: |
        echo "ðŸš¨ Chatbot tests failed on $(date)"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Check the Actions tab for detailed results."
        
        # Add your notification logic here (Slack, email, etc.)
        # Example for Slack webhook:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"ðŸš¨ HubSpot Chatbot tests failed in ${{ github.repository }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        
    - name: Check for sensitive data
      run: |
        # Simple check for potential secrets in code
        grep -r "api_key\|password\|secret\|token" src/ tests/ || true
        
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'https://www.hubspot.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'